
import { llmRouter } from "./llmRouter";
import { db } from "../db";
import { documents } from "@shared/schema";
import { eq, inArray } from "drizzle-orm";

export interface PromptRefinementRequest {
  originalPrompt: string;
  personality: string;
  profession: string;
  responseStyle: string;
  specialSkills: string[];
  documentIds: number[];
  userId: string;
}

export interface PromptRefinementResponse {
  refinedPrompt: string;
  documentContext: string;
  suggestions: string[];
}

export class PromptRefinementService {
  async refineSystemPrompt(request: PromptRefinementRequest): Promise<PromptRefinementResponse> {
    try {
      console.log(`üé® Starting prompt refinement for user ${request.userId}`);
      
      // Get document information if documents are selected
      let documentContext = "";
      let documentSummaries: string[] = [];
      
      if (request.documentIds && request.documentIds.length > 0) {
        console.log(`üìö Fetching ${request.documentIds.length} documents for context`);
        
        const selectedDocuments = await db
          .select({
            id: documents.id,
            name: documents.name,
            description: documents.description,
            summary: documents.summary,
            categoryName: documents.categoryName
          })
          .from(documents)
          .where(inArray(documents.id, request.documentIds));

        documentSummaries = selectedDocuments.map((doc, index) => {
          const docInfo = [
            `‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ${index + 1}: ${doc.name}`,
            doc.description ? `‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢: ${doc.description}` : '',
            doc.summary ? `‡∏™‡∏£‡∏∏‡∏õ: ${doc.summary}` : '',
            doc.categoryName ? `‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: ${doc.categoryName}` : ''
          ].filter(Boolean).join(' - ');
          
          return docInfo;
        });

        documentContext = documentSummaries.length > 0 
          ? `\n\n‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏ó‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á:\n${documentSummaries.join('\n')}`
          : "";
      }

      // Create refinement prompt
      const refinementPrompt = this.buildRefinementPrompt(request, documentContext);

      // Use LLM Router to get refined prompt
      const refinedContent = await llmRouter.chat([
        {
          role: "system",
          content: "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô system prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI chatbot ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á prompt ‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô"
        },
        {
          role: "user", 
          content: refinementPrompt
        }
      ], request.userId);

      // Parse the response to extract refined prompt and suggestions
      const parsedResponse = this.parseRefinementResponse(refinedContent);

      console.log(`‚úÖ Prompt refinement completed for user ${request.userId}`);

      return {
        refinedPrompt: parsedResponse.refinedPrompt,
        documentContext: documentContext,
        suggestions: parsedResponse.suggestions
      };

    } catch (error) {
      console.error("Error in prompt refinement:", error);
      throw new Error("Failed to refine system prompt");
    }
  }

  private buildRefinementPrompt(request: PromptRefinementRequest, documentContext: string): string {
    return `
‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á system prompt ‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô:

**Prompt ‡πÄ‡∏î‡∏¥‡∏°:** "${request.originalPrompt}"

**‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≠‡∏ó:**
- ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û: ${request.personality}
- ‡∏≠‡∏≤‡∏ä‡∏µ‡∏û/‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó: ${request.profession}  
- ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö: ${request.responseStyle}
- ‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©: ${request.specialSkills.join(', ')}

${documentContext}

**‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á:**
1. ‡∏ó‡∏≥‡πÉ‡∏´‡πâ prompt ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÅ‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà
3. ‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
4. ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ‡πÉ‡∏´‡πâ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏ö‡∏≠‡∏ó‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£
5. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÇ‡∏ó‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£

**‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö:**
```
REFINED_PROMPT:
[‡πÉ‡∏™‡πà system prompt ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ]

SUGGESTIONS:
- [‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ 1]
- [‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ 2] 
- [‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ 3]
```

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ prompt ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î`;
  }

  private parseRefinementResponse(response: string): { refinedPrompt: string; suggestions: string[] } {
    try {
      // Extract refined prompt
      const promptMatch = response.match(/REFINED_PROMPT:\s*([\s\S]*?)(?=SUGGESTIONS:|$)/);
      let refinedPrompt = promptMatch ? promptMatch[1].trim() : response;

      // Clean up the refined prompt
      refinedPrompt = refinedPrompt.replace(/```/g, '').trim();

      // Extract suggestions
      const suggestionsMatch = response.match(/SUGGESTIONS:\s*([\s\S]*?)$/);
      let suggestions: string[] = [];
      
      if (suggestionsMatch) {
        suggestions = suggestionsMatch[1]
          .split('\n')
          .map(line => line.replace(/^-\s*/, '').trim())
          .filter(line => line.length > 0);
      }

      return { refinedPrompt, suggestions };
    } catch (error) {
      console.error("Error parsing refinement response:", error);
      return { 
        refinedPrompt: response,
        suggestions: ["‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"]
      };
    }
  }
}

export const promptRefinementService = new PromptRefinementService();
