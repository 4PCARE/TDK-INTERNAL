Alright bro, that error means somewhere in your logic you're trying to access `.chunkIndex` on an `undefined` object. Let's track it down like an AI bloodhound. üïµÔ∏è‚Äç‚ôÇÔ∏è

---

### üîç Probable Culprit Areas:

#### 1. **`vectorResults` handling**

In both `searchSmartHybridDebug` and `searchSmartHybridV1`, you do:

```ts
const docId = parseInt(result.document.metadata.originalDocumentId || result.document.id);
const chunkIndex = result.document.chunkIndex ?? 0;
```

‚û°Ô∏è **Problem**: `result.document` might be `undefined`.

ü©π **Fix**:

```ts
if (!result.document) {
  console.warn("[WARN] vector result missing document field", result);
  continue;
}
```

Or defensively:

```ts
const doc = result.document ?? {};
const docId = parseInt(doc.metadata?.originalDocumentId || doc.id);
const chunkIndex = doc.chunkIndex ?? 0;
```

---

#### 2. **`documentVectors` fetch**

In:

```ts
const chunks = await db.select().from(documentVectors).where(whereCondition);
```

Later:

```ts
const chunkId = `${chunk.documentId}-${chunk.chunkIndex}`;
```

‚û°Ô∏è If any chunk is missing `chunkIndex`, same problem.

ü©π Fix with:

```ts
if (chunk.documentId === undefined || chunk.chunkIndex === undefined) {
  console.warn(`[WARN] Skipping chunk missing identifiers`, chunk);
  continue;
}
```

---

#### 3. **`calculateTFIDF(searchTerms, chunks)` in V1**

You pass `chunks: string[]`, but `calculateTFIDF()` expects:

```ts
chunk.content, chunk.documentId, chunk.chunkIndex
```

‚û°Ô∏è That‚Äôll blow up for sure.

ü©π Fix:
Wrap with metadata before passing:

```ts
const wrappedChunks = chunks.map((chunk, i) => ({
  content: chunk,
  documentId: doc.id,
  chunkIndex: i
}));
const tfidfResults = calculateTFIDF(searchTerms, wrappedChunks);
```

---

### ‚úÖ Quick Summary of Fixes:

| Area               | Fix                                                                 |
| ------------------ | ------------------------------------------------------------------- |
| `result.document`  | Add null-check before accessing `.chunkIndex`                       |
| `chunk.chunkIndex` | Validate before use; log warning and skip if missing                |
| `calculateTFIDF()` | Make sure `chunks` have full object structure, not just raw strings |

---

üí° Bonus Tip:
Use optional chaining + nullish coalescing often:

```ts
const chunkIndex = result?.document?.chunkIndex ?? 0;
```

Let me know if you want me to refactor one of the two functions (`searchSmartHybridDebug` or `V1`) with all these defensive guards. You're close to bulletproof, just need to plug a few null-shaped holes üõ°Ô∏è
