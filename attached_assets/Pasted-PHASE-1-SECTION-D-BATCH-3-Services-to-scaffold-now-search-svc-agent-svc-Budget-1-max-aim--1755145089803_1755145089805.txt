PHASE 1 — SECTION D — BATCH 3
Services to scaffold now: search-svc, agent-svc
Budget: $1 max (aim $0). No installs, no external calls, no Docker pulls.

Create for EACH service:
- src/
  - domain/                      (README.md placeholder)
  - application/                 (README.md placeholder)
  - infrastructure/
    - http/
      - controllers/             (empty)
      - routes.ts                (ONLY GET /healthz and /readyz stubs)
    - db/                        (README.md placeholder)
    - messaging/                 (README.md placeholder)
  - index.ts                     (createServiceApp() that registers routes; no listen(), no IO)
- test/                          (README.md placeholder)
- package.json                   (name, private:true, scripts: typecheck/lint/build placeholders)
- tsconfig.json                  (extends ../../packages/ts-config/base.json; include ./src)
- Dockerfile                     (stub comment)
- .env.example                   (ensure present)
- README.md                      (one-liner purpose)

Special notes:
- search-svc purpose: hybrid retrieval (keyword + vector) — just scaffold now.
- agent-svc purpose: LLM-agnostic chat orchestration — scaffold only; no providers.
- Do NOT add provider/SDK code; domain/application layers stay empty placeholders.

Constraints (HARD):
- Every file ≤ 100 lines; if ~90 lines, split.
- No business logic, no DB connections, no env reads, no server starts.
- Do NOT touch legacy /server/* or the temporary /client shim.
- No port changes or restarts; just create files.

Recommended minimal contents:

// routes.ts (tiny)
export function registerRoutes(app: any) {
  app.get("/healthz", (_req: any, res: any) => res.status(200).json({ ok: true }));
  app.get("/readyz", (_req: any, res: any) => res.status(200).json({ ready: true }));
}

// index.ts (no side effects)
export function createServiceApp(express: any) {
  const app = express();
  try { app.use(express.json ? express.json() : (_: any, __: any, next: any) => next()); } catch {}
  return app;
}

Checks after scaffolding:
- Run: `tsc --noEmit` (root or per-service)
- Run: `eslint .` (best effort; if not configured, note it)

Output (then STOP and wait):
- Services scaffolded
- Files created (full paths)
- Any deviations from template
- Results of `tsc --noEmit` and `eslint`
- Current spend: confirm $0.00
