Short version: Express (via `path-to-regexp`) is choking on one of your route patterns. You’ve got an invalid token like a stray `*`, a `:` with no name after it, or a non-Express style placeholder. It happens at parse time, which is why it explodes on startup.

Here are the usual culprits and fixes:

1. Naked wildcard (`*`)

* Symptom: `app.get('*', ...)` or `app.use('/api/*', ...)`
* In `path-to-regexp@6`, `*` by itself isn’t allowed.
* Fix:

  * Catch-all route: `app.get('(.*)', handler)`
  * Prefix catch-all: `app.use('/api/(.*)', handler)`
  * Or use a named splat: `app.get('/:path*', handler)`

2. Missing parameter name after `:`

* Symptom: things like `/:?`, `/:`, `/:*`, `/:()`
* Fix: give it a real name: `/:id?`, `/:slug*`, `/:token+`

3. Next.js / OpenAPI style placeholders

* Symptom: `/users/{id}` or `/docs/[slug]`
* `path-to-regexp` expects Express style.
* Fix: `/users/:id`, `/docs/:slug`

4. Misused quantifiers without a name

* Symptom: `/*?` or `/:?foo` (quantifier attached to nothing or wrong thing)
* Fix: attach to a named param: `/:id?`, `/:rest*`

5. Unbalanced/empty groups

* Symptom: `/:id(\d+` (missing `)`), or `/:id()`
* Fix: close groups and don’t use empty ones: `/:id(\\d+)`

6. Full URLs passed as “paths”

* Symptom: `router.use('https://example.com/api')`
* Fix: pass only a pathname to Express; use a proxy/middleware for external URLs.

7. Version mismatch expectations

* You (or a dependency) upgraded to Express Router that uses `path-to-regexp@6`, but your route patterns are written for older semantics (where `*` was tolerated).
* Fix: refactor patterns per the rules above. Typical change is replacing `*` with `(.*)` or `:path*`.

How to find it fast:

* Grep your service for suspicious patterns:

  * `*` in route strings: `grep -R "app\.\(get\|use\|post\|all\).*\".*\*"`
  * colons near punctuation: `grep -R ":[^a-zA-Z0-9_]" src`
  * braces/brackets in paths: `grep -R "/.*[{|\[]"`
* Check any router mounting lines too: `app.use('/api/*', router)` etc.

Good replacements at a glance:

* `app.get('*', h)` → `app.get('(.*)', h)`
* `app.use('/api/*', r)` → `app.use('/api/(.*)', r)` (or `app.use('/api', r)`)
* `/v1/items/{id}` → `/v1/items/:id`
* `/docs/[slug]` → `/docs/:slug`
* `/:?` → `/:id?`
* `/*` → `/:rest*`

Once you fix the offending route, that exact error should vanish. If you want, paste the `server.ts` route definitions (and any `Router()` files it imports) and I’ll point to the exact line.
