Here’s the surgical, fastest order with tiny patches you can apply (or hand to Replit in chunks):

1) Kill the null in CreateAgentChatbot (unblocks many UI errors)

Why: Your DTO expects guardrailsConfig | undefined, but you’re sending null.
Patch:

// apps/admin-ui/src/pages/CreateAgentChatbot.tsx
// build a clean value that is undefined when empty
const gc = agent.guardrailsConfig;
const guardrailsConfigClean =
  gc && Object.keys(gc).length ? gc : undefined;

// also drop unknown fields like brandVoice unless they exist in shared/schema
const finalData = { ...agent, guardrailsConfig: guardrailsConfigClean };
saveAgentMutation.mutate(finalData);


This resolves the TS2322 at lines ~652/402. 

2) Type the user (kills all user?.email/role on {})

Why: Un-annotated queries default to {}/unknown.
Patch pattern (repeat in Settings, LiveChatWidget, UserManagement):

type User = { email?: string; role?: 'admin' | 'user' | string };

const { data: user } = useQuery<User>(['me'], fetchUser);

// usage stays the same:
user?.email?.includes('admin')
user?.role === 'admin'


This clears LiveChatWidget.tsx lines 444/710 and Settings.tsx lines 93/428/561/941, plus UserManagement.tsx:265. 

3) UserFeedback nullability (the aiCategories.map crash)

Why: aiCategories is (string | undefined)[].
Patch:

const safeCats = (aiCategories ?? []).filter(Boolean) as string[];
{safeCats.map((category) => (
  <CommandItem key={category} value={category}>...</CommandItem>
))}


Also add a type to tag:

{feedback.tags.map((tag: unknown) => String(tag)).join(", ")}


Fixes TS2345/TS7006 at ~640 and ~943. 

4) Server: guardrails/search defaults + union narrowing + error typing

Why: Backend type says agent rows don’t have guardrailsConfig; you must narrow. You also access keywordWeight/vectorWeight that aren’t guaranteed, and treat finalTokenLimit as defined.

Patch pattern (apply in server/agentBot.ts and server/lineOaWebhook.ts where flagged):

// guardrails presence
if ('guardrailsConfig' in agentData && (agentData as any).guardrailsConfig) {
  guardrailsService = new GuardrailsService((agentData as any).guardrailsConfig);
}

// search defaults
const { keywordWeight = 0.5, vectorWeight = 0.5, finalTokenLimit } = searchConfig ?? {};
const finalCharLimit = (finalTokenLimit ?? 2048) * 4;

// message union narrowing
type MinimalBotMsg = { type?: string; content?: string };
const hasType = (m: unknown): m is MinimalBotMsg => !!m && typeof (m as any).type === 'string';
let contextMessage = hasType(message) ? (message.content ?? '') : (message as any).message;
if (hasType(message) && message.type === 'image') { /* ... */ }

// error typing
catch (error: unknown) {
  const msg = error instanceof Error ? error.message : String(error);
  // use msg
}


This addresses the clusters at 373–737, 471–567, 784–897, 935–976, and multiple unknown error logs. 

5) Server bootstrap: exports, globals, Azure types

Why: Mismatched import styles + missing global + missing type decl.

Make imports match actual exports (switch default vs named to whatever the module actually provides):

// server/index.ts
import createReplitAuthRouter from './replitAuth';   // or { createReplitAuthRouter } if named
import { imageAnalysisRoute } from './lineImageService'; // or default if that’s how it exports
import viteRoute from './vite'; // or { viteRoute } if not default


Add a global declaration file and initialize:

// server/global.d.ts
declare global { var wsClients: Set<any> | undefined; }
export {};
// somewhere at startup:
global.wsClients ||= new Set();


Azure types:

// types/passport-azure-ad.d.ts
declare module 'passport-azure-ad';


Fixes TS2305/TS1192 and global.wsClients possibly undefined. 

6) HR API: use name, not firstName/lastName

Why: Your table/row only has name.
Patch:

message: `Yes, ${employee.employeeId} ${employee.name} is working in ${employee.department}`,
const fullName = employee.name;


And remove selects of hrEmployees.firstName/lastName. Fixes hrApi.ts 46–92. 

7) Routes/DB alignment (remove phantom fields, add required ones)

Agents create requires systemPrompt. Supply it (even an empty string for now) when creating: fixes error at server/routes/agents.ts:75.

Remove createdBy, isPublic, addedAt, originalDocumentId from inserts/selects unless you actually migrated the schema (errors at admin.ts 257, agents.ts 152/209/581, documents.ts 540/718/773).

Where a delete needs optional chaining:

// operand of 'delete' must be optional
delete duplicateData?.id;


Analytics “self-reference”: split into two steps (declare then use) so documentAccess isn’t used before declaration.

lineTemplates undefined: either import the table or replace its usage with the actual table name you have.

All referenced in the big block under routes/*. 

8) Misc one-liners you can batch

server/replitAuth.ts: req.user?.claims → your User likely doesn’t have claims. Use the actual property (id, sub, etc.) or extend the type.

reprocess-document-252.ts: make extractTextFromFile public or use a public wrapper.

routes.ts: ensure agentId is a number:

const safeAgentId = Number(agentId ?? 0);
await storage.getChatHistoryWithMemoryStrategy(userId, channelType, channelId, safeAgentId, messageLimit);


databaseQueryService.suggestQueries(...): pass userQuestion.

ES target / Set spread: add --target es2015 or --downlevelIteration in tsconfig to iterate Set.

Remove nonexistent config options (verboseMode in documentProcessor).

Pasteable Replit chunk (next step)

Use this one next; it knocks out the top failures quickly.

Title: Fix top-blocking type errors (guardrails null, user typing, union/defaults)
Plan:
1) In CreateAgentChatbot.tsx, never send null guardrailsConfig: compute guardrailsConfigClean (undefined when empty), remove brandVoice if not in shared types, and send that.
2) Type the user object in Settings.tsx, LiveChatWidget.tsx, UserManagement.tsx via useQuery<User>, where User = { email?: string; role?: string }.
3) In UserFeedback.tsx, map over a safe string[]: const safeCats = (aiCategories ?? []).filter(Boolean) as string[]; also type tag as unknown→String.
4) In server/agentBot.ts and server/lineOaWebhook.ts, (a) guard 'guardrailsConfig' with an 'in' check, (b) default keywordWeight/vectorWeight, (c) guard finalTokenLimit (fallback 2048), (d) narrow BotMessage union via a type guard, (e) standardize catch(error: unknown){...}.
5) In server/index.ts, fix import styles to match actual exports; add server/global.d.ts declaring var wsClients: Set<any> | undefined and initialize with global.wsClients ||= new Set(); add types/passport-azure-ad.d.ts with `declare module 'passport-azure-ad';`.
6) In server/hrApi.ts, replace firstName/lastName with name everywhere.

After edits:
- Show unified diffs.
- Run `npx tsc --noEmit` and post the new error count only (no walls of text).


Once that’s green(er), we run a second chunk to clean up the DB insert shapes, analytics self-reference, lineTemplates, and the small leftovers.