APPLY — Phase 2 Micro-Batch 1 (api-gateway only)
Follow the budget policy ($1 max). Do not edit package.json. No installs.

Files to change (2 total):
1) CREATE: services/api-gateway/src/infrastructure/http/validate.ts
2) EDIT:   services/api-gateway/src/infrastructure/http/routes.ts  (+~12–15 lines)

Implementation details:

# 1) validate.ts (≈ 30 lines max)
# Try to use zod if it’s already available; otherwise fallback to a tiny inline check.
export type Health = { ok: true };
export type Ready  = { ready: true };

export function validateHealth(data: any): data is Health {
  try {
    // Optional zod: import within try to avoid bundler resolution if not installed
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const z: typeof import("zod") = require("zod");
    const HealthSchema = z.object({ ok: z.literal(true) });
    HealthSchema.parse(data);
    return true;
  } catch {
    return !!(data && data.ok === true);
  }
}

export function validateReady(data: any): data is Ready {
  try {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const z: typeof import("zod") = require("zod");
    const ReadySchema = z.object({ ready: z.literal(true) });
    ReadySchema.parse(data);
    return true;
  } catch {
    return !!(data && data.ready === true);
  }
}

# 2) routes.ts — call validators before responding
# import { validateHealth, validateReady } from "./validate";
# Keep added lines minimal; return 500 on contract violation.

import type { Request, Response } from "express";
import { validateHealth, validateReady } from "./validate";

export function registerRoutes(app: any) {
  app.get("/healthz", (_req: Request, res: Response) => {
    const payload = { ok: true };
    if (!validateHealth(payload)) {
      return res.status(500).json({ message: "Contract violation" });
    }
    return res.status(200).json(payload);
  });

  app.get("/readyz", (_req: Request, res: Response) => {
    const payload = { ready: true };
    if (!validateReady(payload)) {
      return res.status(500).json({ message: "Contract violation" });
    }
    return res.status(200).json(payload);
  });
}

VERIFY (local, cheap):
- Run: tsc --noEmit
- (Optional) Node import smoke test:
  node -e "require('./services/api-gateway/src/infrastructure/http/routes.ts'); console.log('routes ok')"

REPORT (then STOP):
- Files touched (2) with +/- line counts
- Restarts performed: expect 0
- tsc result
- Budget status: on track
