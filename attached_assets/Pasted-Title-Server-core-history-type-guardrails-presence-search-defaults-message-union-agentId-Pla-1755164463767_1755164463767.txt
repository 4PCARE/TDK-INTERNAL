Title: Server core â€” history type, guardrails presence, search defaults, message union, agentId
Plan:
1) In server/agentBot.ts and server/lineOaWebhook.ts:
   - Create ChatMessage adapter: your recentChatHistory must include messageType & createdAt.
   - Guard guardrails via `'guardrailsConfig' in agentData` before access; never reference agentData.guardrailsConfig directly.
   - Destructure searchConfig with defaults for keywordWeight/vectorWeight/finalTokenLimit.
   - Add a type guard isBotMessage(...) and use it before reading .type/.content.
   - Add getAgentId(...) to normalize number|string|object unions.
Edits:
--- a/server/agentBot.ts
+++ b/server/agentBot.ts
@@
-type ChatTurn = { role: 'user'|'assistant'; content: string };
-const recentChatHistory: ChatTurn[] = [];
+type ChatTurn = { role: 'user'|'assistant'|'system'; content: string; timestamp?: string|Date };
+type ChatMessage = { role: 'user'|'assistant'|'system'; content: string; messageType: 'text'|'image'|'sticker'; createdAt: Date };
+const recentChatHistory: ChatTurn[] = [];
+const adaptHistory = (turns: ChatTurn[]): ChatMessage[] =>
+  turns.map(t => ({ role: t.role, content: t.content, messageType: 'text', createdAt: new Date(t.timestamp ?? Date.now()) }));
@@
-  recentChatHistory,
+  recentChatHistory: adaptHistory(recentChatHistory),
@@
- if (hasGuardrails(agentData.guardrailsConfig)) {
-   guardrailsService = new GuardrailsService(agentData.guardrailsConfig);
- }
+ const hasGR = (x: unknown): x is { guardrailsConfig: any } => !!x && typeof x === 'object' && 'guardrailsConfig' in x;
+ if (hasGR(agentData) && (agentData as any).guardrailsConfig) {
+   guardrailsService = new GuardrailsService((agentData as any).guardrailsConfig);
+ }
@@
-            keywordWeight: searchConfig.keywordWeight ?? 0.5,
-            vectorWeight: searchConfig.vectorWeight ?? 0.5,
+            ...(() => {
+              const { keywordWeight = 0.5, vectorWeight = 0.5 } = (searchConfig ?? {}) as any;
+              return { keywordWeight, vectorWeight };
+            })(),
@@
- console.log(`ðŸ¤– AgentBot: Processing ${message.type} message ...`);
- if (message.type === "image") { ... }
- let contextMessage = message.content;
- if (message.type === "sticker") { ... }
+ type MinimalMsg = { type?: string; content?: string };
+ const isBotMessage = (m: unknown): m is MinimalMsg => !!m && typeof (m as any).type === 'string';
+ const kind = isBotMessage(message) ? (message.type ?? 'text') : 'text';
+ console.log(`ðŸ¤– AgentBot: Processing ${kind} message ...`);
+ if (kind === "image") { /* ... */ }
+ let contextMessage = isBotMessage(message) ? (message.content ?? '') : (message as any).message;
+ if (kind === "sticker") { /* ... */ }
@@
- agentId: typeof params.agentConfig === 'number' ? params.agentConfig : (params.agentConfig?.id || params.agentConfig),
+ const getAgentId = (v: unknown): number => typeof v === 'number' ? v : Number((v as any)?.id ?? v ?? 0);
+ agentId: getAgentId(params.agentConfig),
@@
- const { keywordWeight = 0.5, vectorWeight = 0.5, finalTokenLimit } = searchConfig ?? {};
- const finalCharLimit = (finalTokenLimit ?? 2048) * 4;
+ const { keywordWeight = 0.5, vectorWeight = 0.5, finalTokenLimit } = (searchConfig ?? {}) as any;
+ const finalCharLimit = (finalTokenLimit ?? 2048) * 4;

--- a/server/lineOaWebhook.ts
+++ b/server/lineOaWebhook.ts
@@
-  recentChatHistory,
+  recentChatHistory: adaptHistory(recentChatHistory as any),
@@
- if (hasGuardrails(agentData.guardrailsConfig)) { ... }
+ const hasGR = (x: unknown): x is { guardrailsConfig: any } => !!x && typeof x === 'object' && 'guardrailsConfig' in x;
+ if (hasGR(agentData) && (agentData as any).guardrailsConfig) {
+   guardrailsService = new GuardrailsService((agentData as any).guardrailsConfig);
+ }
@@
- const keywordWeight = searchConfig.keywordWeight ?? 0.3;
- const vectorWeight = searchConfig.vectorWeight ?? 0.7;
+ const { keywordWeight = 0.3, vectorWeight = 0.7 } = (searchConfig ?? {}) as any;
@@
- keywordWeight: searchConfig.keywordWeight,
- vectorWeight: searchConfig.vectorWeight,
+ keywordWeight, vectorWeight,
After:
- Run `npx tsc --noEmit` and report new error count only.
