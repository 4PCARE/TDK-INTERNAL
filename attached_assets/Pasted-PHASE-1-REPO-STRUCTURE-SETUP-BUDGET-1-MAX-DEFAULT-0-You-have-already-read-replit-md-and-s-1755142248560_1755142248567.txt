PHASE 1 — REPO STRUCTURE SETUP (BUDGET: $1 MAX; DEFAULT $0)
You have already read `replit.md` and scanned the repo. Do NOT modify code yet.

Start here:

A) MAPPING PLAN (no edits)
1) Output ONLY (text, no file changes):
   - Current directory tree (top 3 levels).
   - Proposed Phase-1 target tree:
     /
       services/{api-gateway,auth-svc,doc-ingest-svc,embedding-svc,search-svc,agent-svc,csat-svc,realtime-svc,line-bridge-svc,nlp-svc}
       apps/admin-ui
       packages/{ts-config,eslint-config,contracts,utils}
       infra/{docker-compose.yml,k8s/}
       replit.md
   - Mapping plan: from→to for every directory/file you intend to MOVE in Phase 1.
   - Risk list: ambiguous files, shared types, env usage, any broken import risks.
   - Cost note: confirm $0 external cost for this analysis.
STOP and wait for approval.

B) SCAFFOLD (tiny, zero-cost stubs — only after approval of A)
2) Create empty/stub structure (no SDKs, no dependencies, no network):
   - /packages/ts-config (base tsconfig)
   - /packages/eslint-config (rules: max-lines 600, max-lines-per-function 80, complexity 10)
   - /packages/contracts placeholders + ai/ interfaces: LLMClient.ts, EmbeddingsClient.ts (provider-agnostic)
   - /packages/utils (placeholder index)
   - /infra/docker-compose.yml (stub; no images pulled)
   - .env.example (no secrets)
Output the file list created and confirm $0 cost.
STOP for approval.

C) FRONTEND MOVE (no logic changes)
3) Move React app to /apps/admin-ui. Adjust ONLY broken relative imports.
   - Process max 20 files per batch; after each batch run local: `tsc --noEmit`, `eslint .`
   - Output: files moved, import fixes, results of typecheck/lint. Confirm $0 cost.
STOP for approval.

D) SERVICE FOLDERS (no logic, no SDKs)
4) For each service under /services/*, create skeleton only:
   src/{domain,application,infrastructure/http/controllers,infrastructure/http/routes.ts,infrastructure/db,infrastructure/messaging}, index.ts
   package.json, tsconfig.json, Dockerfile (stub), test/
   Add stub `/healthz` and `/readyz` routes (no handlers).
Output folders/files created. Confirm $0 cost.
STOP for approval.

E) CONTRACT STUBS (no behavior)
5) In /packages/contracts, add minimal OpenAPI stubs for:
   api-gateway, auth-svc, doc-ingest-svc, embedding-svc, search-svc, agent-svc, csat-svc, realtime-svc, line-bridge-svc, nlp-svc.
   Include only top-level paths + common schemas placeholders.
Output list of stubs and confirm $0 cost.
STOP for approval.

COST GUARDRAILS (hard):
- MAX SPEND: $1 total; aim for $0. No paid API calls. No embeddings/LLM/vision.
- No network installs or Docker pulls without explicit approval.
- If estimated cost ≥ $0.80 at any point, STOP and report.

RULES (hard):
- No business logic changes. No endpoint behavior changes.
- No provider SDK usage added/removed.
- If any edit pushes a file near 550 lines, split with identical behavior.
- Pause after every STOP. Do nothing until I approve.

END-OF-PHASE-1 DELIVERABLES:
- Before/After trees (top 3 levels)
- Final approved mapping (from→to)
- List of scaffolding files
- Proof `tsc --noEmit`, `eslint .`, and `scripts/check-lines.mjs` pass locally (no network)
- Follow-ups deferred to Phase 2 (service extraction)

Begin at Section A now. Do not modify files until I approve A.
