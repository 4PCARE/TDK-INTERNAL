PHASE 1 — SECTION D — BATCH 2
Services to scaffold now: doc-ingest-svc, embedding-svc
Budget: $1 max (aim $0). No installs, no external calls, no Docker pulls.

Create for EACH service:
- src/
  - domain/                (README.md placeholder)
  - application/           (README.md placeholder)
  - infrastructure/
    - http/
      - controllers/       (empty)
      - routes.ts          (only GET /healthz and /readyz stubs)
    - db/                  (README.md placeholder)
    - messaging/           (README.md placeholder)
  - index.ts               (createExpressApp + registerRoutes only)
- test/                    (README.md placeholder)
- package.json             (name, private:true, scripts: typecheck/lint/build placeholders)
- tsconfig.json            (extends ../../packages/ts-config/base.json, includes ./src)
- Dockerfile               (stub comment)
- .env.example             (ensure present)
- README.md                (one-liner purpose)

Constraints (HARD):
- Keep every file ≤ 100 lines; if a file approaches 90 lines, split.
- No business logic; no provider SDKs; no DB connections; no env reads.
- Do NOT touch legacy `/server/*` or the temporary `/client` shim.
- No port changes or server restarts; only create files.

Recommended minimal contents (keep tiny):

// routes.ts (keep ≤ ~20 lines)
export function registerRoutes(app: any) {
  app.get("/healthz", (_req: any, res: any) => res.status(200).json({ ok: true }));
  app.get("/readyz", (_req: any, res: any) => res.status(200).json({ ready: true }));
}

// index.ts (no network I/O, no listen())
export function createServiceApp(express: any) {
  const app = express();
  // Attach JSON middleware only if available in scope when actually used later.
  try { app.use(express.json ? express.json() : (_: any, __: any, next: any) => next()); } catch {}
  return app;
}

After scaffolding each service, run local checks:
- `tsc --noEmit` (root or per-service if needed)
- `eslint .` (best effort; if not wired yet, note it)

Output (then STOP and wait):
- Services scaffolded
- Files created (full paths)
- Any deviations from the template
- `tsc --noEmit` and `eslint` results
- Current spend: confirm $0.00

Notes:
- `doc-ingest-svc` purpose: upload/extract normalize; event emission (to be implemented later).
- `embedding-svc` purpose: provider-agnostic embeddings API; adapters later.

Proceed now with ONLY these two services. STOP after reporting.
