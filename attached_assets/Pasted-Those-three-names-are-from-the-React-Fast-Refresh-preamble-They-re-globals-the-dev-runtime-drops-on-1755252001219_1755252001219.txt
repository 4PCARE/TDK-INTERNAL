Those three names are from the React Fast Refresh preamble. They’re globals the dev runtime drops on window/globalThis. Seeing “already been declared” means the refresh preamble is executing twice. Translation: you’ve got two dev runtimes trying to attach at once—either because React Refresh is injected twice or React itself is duplicated.

Here’s the fix checklist, top-down, with the “why” for each.

1) Make sure you don’t load the dev client twice

Why: If @vite/client or the refresh preamble is included twice, the preamble redeclares inWebWorker, prevRefreshReg, prevRefreshSig.
	•	Open apps/admin-ui/index.html and ensure you have only one module script:

<!-- exactly one of these -->
<script type="module" src="/src/main.tsx"></script>


	•	You should not manually add @vite/client or react-refresh anywhere:

<!-- BAD: remove these if present -->
<script type="module" src="/@vite/client"></script>
<script type="module" src="/@react-refresh"></script>



In DevTools → Network, filter for @vite/client and react-refresh. You should see each once.

2) Ensure the React plugin is configured exactly once for this app

Why: Vite injects the refresh runtime via @vitejs/plugin-react. If you add it in two configs (root + app), you get two injections.
	•	Root vite.config.ts (if you have a monorepo): no react() here if the app has its own.

// root/vite.config.ts
import { defineConfig } from 'vite';
export default defineConfig({
  plugins: [], // leave react() out at the root
});


	•	App vite.config.ts:

// apps/admin-ui/vite.config.ts
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
});



Also check you’re not composing configs that end up adding react() twice.

3) Deduplicate React (and the refresh runtime) in a monorepo

Why: Two copies of React/ReactDOM or react-refresh → two runtimes mounted.
	•	Inspect duplicates:

pnpm why react react-dom react-refresh \
|| yarn why react react-dom react-refresh \
|| npm ls react react-dom react-refresh


	•	If duplicates show up:
	•	Make React/ReactDOM peerDependencies in shared packages.
	•	Add dedupe in Vite:

// apps/admin-ui/vite.config.ts
export default defineConfig({
  resolve: { dedupe: ['react', 'react-dom'] },
  plugins: [react()],
});


	•	Force single versions via overrides/resolutions if needed.
	•	Reinstall and clear caches:

rm -rf node_modules .vite dist .turbo
pnpm i   # or yarn / npm i



4) Don’t import or wire “react-refresh” manually

Why: Manual preamble = second preamble.

Search and remove:

grep -R --line-number -E "react-refresh|RefreshRuntime|prevRefresh(Reg|Sig)" .

5) Confirm you only have one root render

Why: Multiple createRoot won’t directly cause those symbol errors, but they often co-occur in multi-entry setups.

grep -R --line-number -E "ReactDOM\\.createRoot\\(|ReactDOM\\.render\\(" apps/

Keep a single entry point (usually src/main.tsx). App.tsx is fine; it doesn’t initialize anything.

6) Sanity toggle to prove the diagnosis

Why: Turning off Fast Refresh should make the error vanish if the issue is duplication of the refresh runtime.
	•	Temp disable:

// apps/admin-ui/vite.config.ts
import react from '@vitejs/plugin-react';
export default defineConfig({
  plugins: [react({ fastRefresh: false })],
});


	•	Or set VITE_REACT_FAST_REFRESH=false in .env.local.

If the errors disappear, you 100% had duplicate refresh injection. Re-enable after fixing steps 1–4.

⸻

If you paste:
	•	apps/admin-ui/index.html
	•	vite.config.ts at the repo root and in apps/admin-ui/
	•	The output of pnpm why react react-dom react-refresh

…I’ll mark the exact lines to change and give you a tiny patch that actually fixes it (no “+0 −0” theater).